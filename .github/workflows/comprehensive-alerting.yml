---
name: Comprehensive Failure Alerting

'on':
  workflow_run:
    workflows: ["CI/CD", "Chaos Engineering"]
    types:
      - completed
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:

jobs:
  alert-on-any-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Gather failure context
        run: |
          echo "FAILED_WORKFLOW=${{ github.event.workflow_run.name }}" >> $GITHUB_ENV
          echo "FAILED_RUN_ID=${{ github.event.workflow_run.id }}" >> $GITHUB_ENV
          echo "FAILED_SHA=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_ENV
          echo "FAILED_BRANCH=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_ENV
          echo "FAILURE_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

      - name: Send Teams alert
        uses: actions/github-script@v7
        with:
          script: |
            const webhookUrl = '${{ secrets.TEAMS_WEBHOOK_URL }}';
            if (!webhookUrl) {
              console.log('No Teams webhook configured');
              return;
            }
            
            const failureData = {
              workflow: process.env.FAILED_WORKFLOW,
              runId: process.env.FAILED_RUN_ID,
              sha: process.env.FAILED_SHA,
              branch: process.env.FAILED_BRANCH,
              time: process.env.FAILURE_TIME
            };
            
            await fetch(webhookUrl, {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify({
                '@type': 'MessageCard',
                '@context': 'https://schema.org/extensions',
                themeColor: 'FF0000',
                title: '🚨 Workflow Failure Alert',
                text: `The ${failureData.workflow} workflow has failed`,
                sections: [{
                  facts: [
                    {name: 'Workflow', value: failureData.workflow},
                    {name: 'Branch', value: failureData.branch},
                    {name: 'Commit', value: failureData.sha.substring(0, 7)},
                    {name: 'Time', value: failureData.time},
                    {name: 'Run ID', value: failureData.runId}
                  ]
                }],
                potentialAction: [{
                  '@type': 'OpenUri',
                  name: 'View Failed Run',
                  targets: [{
                    os: 'default',
                    uri: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${failureData.runId}`
                  }]
                }]
              })
            });
            
            console.log('Teams alert sent successfully');

      - name: Create GitHub Issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 ${process.env.FAILED_WORKFLOW} Failed`,
              body: `## Workflow Failure Alert
            
            The **${process.env.FAILED_WORKFLOW}** workflow has failed.
            
            ### Details
            - **Branch:** ${process.env.FAILED_BRANCH}
            - **Commit:** ${process.env.FAILED_SHA}
            - **Time:** ${process.env.FAILURE_TIME}
            - **Run ID:** ${process.env.FAILED_RUN_ID}
            
            ### Action Required
            Please investigate and fix the failure immediately.
            
            [View Failed Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.FAILED_RUN_ID})`,
              labels: ['ci-failure', 'urgent']
            });
            
            console.log(`Created issue #${issue.data.number}`);

  hourly-health-check:
    runs-on: ubuntu-latest
    if: github.event.schedule

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check deployment health
        run: |
          ./scripts/check-deployment.sh

      - name: Run smoke tests
        run: |
          node smoke-test.js

      - name: Report status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const webhookUrl = '${{ secrets.TEAMS_WEBHOOK_URL }}';
            
            if (!webhookUrl) return;
            
            const color = status === 'success' ? '00FF00' : 'FF0000';
            const title = status === 'success' ? '✅ Health Check Passed' : '❌ Health Check Failed';
            
            await fetch(webhookUrl, {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify({
                '@type': 'MessageCard',
                '@context': 'https://schema.org/extensions',
                themeColor: color,
                title: title,
                text: 'Hourly deployment health check',
                sections: [{
                  facts: [
                    {name: 'Status', value: status},
                    {name: 'Time', value: new Date().toISOString()},
                    {name: 'Repository', value: '${{ github.repository }}'}
                  ]
                }]
              })
            });

  alert-on-high-failures:
    runs-on: ubuntu-latest
    if: github.event.workflow_run

    steps:
      - name: Query recent failures
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'failure',
              created: `>=${new Date(Date.now() - 3600000).toISOString()}`
            });
            
            const failureCount = runs.data.workflow_runs.length;
            console.log(`Failures in last hour: ${failureCount}`);
            
            if (failureCount >= 3) {
              const webhookUrl = '${{ secrets.TEAMS_WEBHOOK_URL }}';
              if (webhookUrl) {
                await fetch(webhookUrl, {
                  method: 'POST',
                  headers: {'Content-Type': 'application/json'},
                  body: JSON.stringify({
                    '@type': 'MessageCard',
                    '@context': 'https://schema.org/extensions',
                    themeColor: 'FF0000',
                    title: '🚨🚨 HIGH FAILURE RATE DETECTED 🚨🚨',
                    text: `${failureCount} workflow failures in the last hour!`,
                    sections: [{
                      activityTitle: 'Immediate action required',
                      activityText: 'Multiple CI/CD failures detected. System may be unstable.',
                      facts: [
                        {name: 'Failures', value: failureCount.toString()},
                        {name: 'Time Window', value: '1 hour'},
                        {name: 'Severity', value: 'CRITICAL'}
                      ]
                    }],
                    potentialAction: [{
                      '@type': 'OpenUri',
                      name: 'View All Failures',
                      targets: [{
                        os: 'default',
                        uri: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions?query=status%3Afailure`
                      }]
                    }]
                  })
                });
              }
            }