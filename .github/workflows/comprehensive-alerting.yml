name: Comprehensive Failure Alerting

on:
  workflow_run:
    workflows: ["CI/CD", "Chaos Engineering"]
    types:
      - completed
  workflow_dispatch:

jobs:
  alert-on-any-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Determine failure type
      id: failure
      run: |
        WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
        WORKFLOW_RUN_ID="${{ github.event.workflow_run.id }}"
        WORKFLOW_URL="${{ github.event.workflow_run.html_url }}"

        # Analyze workflow logs to determine failure type
        echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
        echo "workflow_url=$WORKFLOW_URL" >> $GITHUB_OUTPUT

        # Get failure details
        FAILURE_TYPE="Unknown"
        if [[ "$WORKFLOW_NAME" == "CI/CD" ]]; then
          FAILURE_TYPE="Build/Test/Deploy"
        elif [[ "$WORKFLOW_NAME" == "Chaos Engineering" ]]; then
          FAILURE_TYPE="Chaos Test/Rollback"
        fi

        echo "failure_type=$FAILURE_TYPE" >> $GITHUB_OUTPUT

    - name: Send Slack alert
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST $SLACK_WEBHOOK_URL \
          -H 'Content-type: application/json' \
          -d '{
            "text": "üö® *fact.rip Pipeline Failure*",
            "attachments": [{
              "color": "danger",
              "fields": [
                {
                  "title": "Workflow",
                  "value": "${{ steps.failure.outputs.workflow_name }}",
                  "short": true
                },
                {
                  "title": "Failure Type",
                  "value": "${{ steps.failure.outputs.failure_type }}",
                  "short": true
                },
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Details",
                  "value": "<${{ steps.failure.outputs.workflow_url }}|View Workflow Run>",
                  "short": false
                }
              ],
              "footer": "fact.rip Zero-Drift Monitor",
              "ts": ${{ github.event.workflow_run.run_started_at }}
            }]
          }'

    - name: Send PagerDuty alert
      if: env.PAGERDUTY_TOKEN != ''
      env:
        PAGERDUTY_TOKEN: ${{ secrets.PAGERDUTY_TOKEN }}
        PAGERDUTY_SERVICE_ID: ${{ secrets.PAGERDUTY_SERVICE_ID }}
      run: |
        curl -X POST https://api.pagerduty.com/incidents \
          -H 'Authorization: Token token=${{ env.PAGERDUTY_TOKEN }}' \
          -H 'Content-Type: application/json' \
          -d '{
            "incident": {
              "type": "incident",
              "title": "fact.rip Pipeline Failure: ${{ steps.failure.outputs.failure_type }}",
              "service": {
                "id": "${{ env.PAGERDUTY_SERVICE_ID }}",
                "type": "service_reference"
              },
              "urgency": "high",
              "body": {
                "type": "incident_body",
                "details": {
                  "workflow": "${{ steps.failure.outputs.workflow_name }}",
                  "repository": "${{ github.repository }}",
                  "branch": "${{ github.ref_name }}",
                  "run_url": "${{ steps.failure.outputs.workflow_url }}"
                }
              }
            }
          }'

    - name: Create GitHub issue
      uses: actions/github-script@v6
      with:
        script: |
          const issueBody = `
          ## Pipeline Failure Alert

          **Workflow:** ${{ steps.failure.outputs.workflow_name }}
          **Failure Type:** ${{ steps.failure.outputs.failure_type }}
          **Branch:** ${{ github.ref_name }}
          **Run:** ${{ steps.failure.outputs.workflow_url }}

          ### Immediate Actions Required:
          1. Review the failed workflow run
          2. Identify root cause
          3. Fix the issue
          4. Verify fix in CI/CD

          ### Zero-Drift Status: ‚ùå COMPROMISED

          cc: @${context.repo.owner}
          `;

          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Pipeline Failure: ${context.payload.workflow_run.name}`,
            body: issueBody,
            labels: ['critical', 'pipeline-failure', 'zero-drift-violation']
          });

  alert-on-drift:
    runs-on: ubuntu-latest
    schedule:
      - cron: '*/15 * * * *'  # Every 15 minutes

    steps:
    - uses: actions/checkout@v4

    - uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run atomic drift validation
      id: drift
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      run: |
        if ! node scripts/atomic-drift-validator.js; then
          echo "drift_detected=true" >> $GITHUB_OUTPUT
        else
          echo "drift_detected=false" >> $GITHUB_OUTPUT
        fi

    - name: Alert on drift
      if: steps.drift.outputs.drift_detected == 'true'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST $SLACK_WEBHOOK_URL \
          -H 'Content-type: application/json' \
          -d '{
            "text": "‚ö†Ô∏è *Configuration Drift Detected*",
            "attachments": [{
              "color": "warning",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Check Time",
                  "value": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'",
                  "short": true
                }
              ],
              "footer": "fact.rip Drift Monitor",
              "ts": '"$(date +%s)"'
            }]
          }'

  alert-on-secret-exposure:
    runs-on: ubuntu-latest
    on:
      pull_request:
        types: [opened, synchronize]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Alert on secrets
      if: failure()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST $SLACK_WEBHOOK_URL \
          -H 'Content-type: application/json' \
          -d '{
            "text": "üîê *CRITICAL: Secrets Detected in PR*",
            "attachments": [{
              "color": "danger",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "PR",
                  "value": "#${{ github.event.pull_request.number }}",
                  "short": true
                },
                {
                  "title": "Author",
                  "value": "${{ github.event.pull_request.user.login }}",
                  "short": true
                },
                {
                  "title": "Action Required",
                  "value": "IMMEDIATELY rotate exposed credentials and clean git history",
                  "short": false
                }
              ],
              "footer": "fact.rip Security Monitor",
              "ts": '"$(date +%s)"'
            }]
          }'