---
name: PR Security Gate

'on':
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  secret-scanning:
    runs-on: ubuntu-latest
    name: Block PRs with secrets

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}...HEAD > pr-diff.txt

      - name: Check for secrets in PR diff
        run: |
          # Define patterns to search for
          SECRET_PATTERNS=(
            # API Keys
            "api[_-]?key.*[:=].*['\"][0-9a-zA-Z]{32,}['\"]"
            "apikey.*[:=].*['\"][0-9a-zA-Z]{32,}['\"]"
            # AWS
            "aws_access_key_id.*[:=].*['\"][0-9a-zA-Z]{20}['\"]"
            "aws_secret_access_key.*[:=].*['\"][0-9a-zA-Z]{40}['\"]"
            # JWT
            "jwt.*[:=].*['\"]eyJ[0-9a-zA-Z._-]+['\"]"
            # Generic secrets
            "secret.*[:=].*['\"][0-9a-zA-Z]{32,}['\"]"
            "password.*[:=].*['\"][^'\"]{8,}['\"]"
            # GitHub tokens
            "gh[pousr]_[0-9a-zA-Z]{36}"
            # Netlify
            "netlify.*token.*[:=].*['\"][0-9a-zA-Z._-]+['\"]"
          )
          
          FOUND_SECRETS=0
          
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -iE "$pattern" pr-diff.txt; then
              echo "❌ Found potential secret matching pattern: $pattern"
              FOUND_SECRETS=1
            fi
          done
          
          # Check for .env files
          if grep -E "^\+.*\.env(\.|$)" pr-diff.txt; then
            echo "❌ Found .env file in PR"
            FOUND_SECRETS=1
          fi
          
          if [ $FOUND_SECRETS -eq 1 ]; then
            echo "❌ PR contains potential secrets!"
            echo ""
            echo "Please remove all secrets and use GitHub Secrets instead."
            echo "See CLAUDE.md for instructions on proper secret management."
            exit 1
          else
            echo "✅ No secrets detected in PR"
          fi

      - name: Check for hardcoded values
        run: |
          # Check for hardcoded Netlify/deployment values
          if grep -E "sparkly-bombolone-c419df|33e2505e-7a9d-4867-8fbf-db91ca602087" pr-diff.txt; then
            echo "❌ Found hardcoded deployment values"
            echo "Please use config/deployment.json instead"
            exit 1
          fi
          
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '❌ **Security Gate Failed**\n\nThis PR contains secrets or hardcoded values. Please remove them and use GitHub Secrets or config files instead.\n\nSee the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })

  dependency-check:
    runs-on: ubuntu-latest
    name: Check for vulnerable dependencies
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run audit
        run: |
          pnpm audit --audit-level=high
          
      - name: Check for known vulnerable patterns
        run: |
          # Check for unsafe eval usage
          if grep -r "eval(" src/ --exclude-dir=node_modules; then
            echo "❌ Found unsafe eval() usage"
            exit 1
          fi
          
          # Check for innerHTML usage
          if grep -r "innerHTML" src/ --exclude-dir=node_modules | grep -v "__html"; then
            echo "⚠️  Found innerHTML usage - ensure it's sanitized"
          fi

  code-quality:
    runs-on: ubuntu-latest
    name: Enforce code quality standards
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run type check
        run: pnpm run typecheck
      
      - name: Run linter
        run: pnpm run lint
      
      - name: Check formatting
        run: |
          # Add prettier check if available
          if [ -f ".prettierrc" ]; then
            pnpm exec prettier --check .
          fi
          
      - name: Run tests
        run: pnpm test