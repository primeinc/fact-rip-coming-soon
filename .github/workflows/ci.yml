name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]

    steps:
    - uses: actions/checkout@v4

    - uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Check pnpm-only policy
      run: ./scripts/check-npm-usage.sh

    - name: Check for secrets in repository
      run: ./scripts/check-no-secrets.sh

    - name: Validate lockfile version
      run: ./scripts/validate-lockfile.sh

    - name: Enforce storage access pattern
      run: ./scripts/enforce-storage-pattern.sh

    - name: Enforce no timing patterns
      run: ./scripts/enforce-no-timeouts.sh

    - name: Enforce shell script standards
      run: ./scripts/enforce-shell-standards.sh

    - name: Detect configuration drift
      run: ./scripts/detect-config-drift.sh

    - name: Scan for secrets in git history
      run: ./scripts/scan-secret-history.sh

    - name: Type check
      run: pnpm exec tsc --noEmit

    - name: Lint
      run: pnpm exec eslint

    - name: Unit tests
      run: pnpm run test:run

    - name: Install Playwright browsers
      run: pnpm exec playwright install --with-deps

    - name: E2E tests
      run: pnpm exec playwright test || exit 1

    - name: Adversarial endpoint tests
      env:
        VITE_TELEMETRY_ENDPOINT: ${{ secrets.TELEMETRY_ENDPOINT }}
        VITE_ERROR_REPORT_ENDPOINT: ${{ secrets.ERROR_REPORT_ENDPOINT }}
      run: pnpm exec playwright test e2e/adversarial-endpoints.spec.ts

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: playwright-report/

    - name: Build
      run: pnpm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Deploy to Netlify
      if: github.ref == 'refs/heads/main'
      id: netlify-deploy
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      run: |
        # Read deployment config
        SITE_ID=$(cat config/deployment.json | jq -r '.netlify.siteId')
        echo "Deploying to site: $SITE_ID"

        # Deploy with Netlify CLI
        OUTPUT=$(pnpm exec netlify deploy --prod --dir=dist --json)
        DEPLOY_URL=$(echo $OUTPUT | jq -r '.deploy_url')

        echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        echo "üöÄ Deployed to: $DEPLOY_URL"

    - name: Notify Teams of deployment
      if: github.ref == 'refs/heads/main'
      env:
        TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        DEPLOY_URL: ${{ steps.netlify-deploy.outputs.deploy_url }}
      run: |
        curl -H "Content-Type: application/json" -d '{
          "@type": "MessageCard",
          "@context": "https://schema.org/extensions",
          "summary": "Deployment Complete",
          "themeColor": "28a745",
          "title": "üöÄ Deployed: fact-rip-coming-soon",
          "text": "**New version deployed to production.**",
          "sections": [
            {
              "activityTitle": "Deployment Details",
              "activitySubtitle": "main branch",
              "facts": [
                { "name": "Commit", "value": "${{ github.sha.substring(0, 7) }}" },
                { "name": "Author", "value": "${{ github.actor }}" },
                { "name": "Deploy URL", "value": "${{ env.DEPLOY_URL }}" }
              ]
            }
          ],
          "potentialAction": [
            {
              "@type": "OpenUri",
              "name": "View Deployment",
              "targets": [
                { "os": "default", "uri": "${{ env.DEPLOY_URL }}" }
              ]
            }
          ]
        }' $TEAMS_WEBHOOK_URL

  drift-detection:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Detect Netlify drift
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      run: ./scripts/detect-netlify-drift.sh

    - name: Alert on drift
      if: failure()
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: failure
        text: '‚ö†Ô∏è Configuration drift detected in fact.rip deployment!'

  validate-deployment:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Install Playwright browsers
      run: pnpm exec playwright install --with-deps chromium

    - name: Load deployment config
      id: config
      run: |
        PROD_URL=$(cat config/deployment.json | jq -r '.netlify.productionUrl')
        echo "production_url=$PROD_URL" >> $GITHUB_OUTPUT

    - name: Wait for deployment propagation
      run: sleep 10

    - name: Smoke test production URL
      env:
        SMOKE_TEST_URL: ${{ steps.config.outputs.production_url }}
      run: |
        echo "üî• Testing: $SMOKE_TEST_URL"
        pnpm exec node scripts/smoke-test-production.js

    - name: Verify deployment success
      if: failure()
      run: |
        echo "‚ùå Deployment validation failed!"
        echo "The site may be partially deployed or broken."
        echo "DO NOT update documentation until smoke tests pass!"
        exit 1