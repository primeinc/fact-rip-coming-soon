---
name: CI/CD

'on':
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check pnpm-only policy
        run: ./scripts/check-npm-usage.sh

      - name: Check for secrets in repository
        run: ./scripts/check-no-secrets.sh

      - name: Validate lockfile version
        run: ./scripts/validate-lockfile.sh

      - name: Enforce storage access pattern
        run: ./scripts/enforce-storage-pattern.sh

      - name: Enforce no timing patterns
        run: ./scripts/enforce-no-timeouts.sh

      - name: Enforce shell script standards
        run: ./scripts/enforce-shell-standards.sh
      
      - name: Run zero-drift enforcement
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: node scripts/enforce-all.js

      - name: Check deployment configuration drift
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: ./scripts/detect-config-drift.sh

      - name: Check Netlify configuration drift
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: ./scripts/detect-netlify-drift.sh

      - name: Lint check
        run: pnpm run lint

      - name: Type check
        run: pnpm run typecheck

      - name: Unit tests
        run: pnpm test -- --coverage

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  e2e:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        browser: [chromium, firefox]
        
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E tests
        run: pnpm exec playwright test --project=${{ matrix.browser }}

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

  mobile-e2e:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        device: ['iPhone 13', 'Pixel 5']
    
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps chromium webkit

      - name: Run mobile E2E tests
        run: |
          if [[ "${{ matrix.device }}" == "iPhone 13" ]]; then
            projectName="Mobile Safari"
          else
            projectName="Mobile Chrome"
          fi
          pnpm exec playwright test --project="${projectName}"

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-mobile-${{ matrix.device }}
          path: playwright-report/
          retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: [build, e2e, mobile-e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist/

      - name: Install Netlify CLI
        run: pnpm add -g netlify-cli

      - name: Deploy to Netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          pnpm exec netlify deploy --prod --dir=dist

      - name: Verify deployment configuration
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          VITE_TELEMETRY_ENDPOINT: ${{ secrets.VITE_TELEMETRY_ENDPOINT }}
          VITE_ERROR_REPORT_ENDPOINT: ${{ secrets.VITE_ERROR_REPORT_ENDPOINT }}
        run: |
          ./scripts/verify-deployment.sh

      - name: Run production smoke test
        run: node smoke-test.js

      - name: Notify Teams of Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const webhookUrl = '${{ secrets.TEAMS_WEBHOOK_URL }}';
            if (webhookUrl) {
              await fetch(webhookUrl, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                  title: 'Deployment Successful ✅',
                  text: `Successfully deployed fact.rip to production`,
                  sections: [{
                    facts: [
                      {name: 'Environment', value: 'Production'},
                      {name: 'Commit', value: '${{ github.sha }}'},
                      {name: 'Branch', value: '${{ github.ref }}'},
                      {name: 'Deployed by', value: '${{ github.actor }}'}
                    ]
                  }],
                  potentialAction: [{
                    '@type': 'OpenUri',
                    name: 'View Site',
                    targets: [{os: 'default', uri: 'https://sparkly-bombolone-c419df.netlify.app/'}]
                  }]
                })
              });
            }

      - name: Notify Teams of Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const webhookUrl = '${{ secrets.TEAMS_WEBHOOK_URL }}';
            if (webhookUrl) {
              await fetch(webhookUrl, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                  title: 'Deployment Failed ❌',
                  text: `Deployment of fact.rip failed`,
                  sections: [{
                    facts: [
                      {name: 'Environment', value: 'Production'},
                      {name: 'Commit', value: '${{ github.sha }}'},
                      {name: 'Branch', value: '${{ github.ref }}'},
                      {name: 'Failed by', value: '${{ github.actor }}'}
                    ]
                  }],
                  potentialAction: [{
                    '@type': 'OpenUri',
                    name: 'View Workflow',
                    targets: [{
                      os: 'default',
                      uri: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
                    }]
                  }]
                })
              });
            }